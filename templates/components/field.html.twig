{#
  Field Component (Input/Textarea)
  Reusable form field component with label, required indicator, character counter, password toggle

  Usage:
  {% include 'components/field.html.twig' with {
    label: 'Email',
    name: 'email',
    type: 'email',
    placeholder: 'Enter email',
    required: true,
    value: data.email|default('')
  } %}
#}

{% set fieldId = fieldId|default('field-' ~ random()) %}
{% set type = type|default('text') %}
{% set maxLength = maxLength|default(200) %}
{% set showCounter = textarea|default(false) %}

<div class="{% if containerClass %}{{ containerClass }}{% else %}mb-4{% endif %}">
  {% if label %}
    <label for="{{ fieldId }}" class="flex justify-between items-center mb-2">
      <span class="text-body-md font-medium text-gray-500">
        {{ label }}
        {% if required %}<span class="text-error-100"> *</span>{% endif %}
      </span>
      {% if showCounter %}
        <span class="text-body-sm {% if currentLength > maxLength %}text-error-100{% else %}text-gray-300{% endif %}">
          {{ currentLength|default(0) }}/{{ maxLength }}
        </span>
      {% endif %}
    </label>
  {% endif %}

  <div class="relative">
    {% if textarea %}
      <textarea
        id="{{ fieldId }}"
        name="{{ name|default('') }}"
        class="w-full h-37.5 p-3 border border-gray-100 rounded-xl text-body-lg text-gray-900 transition-colors resize-none outline-0 focus:!border-primary-500 focus:bg-primary-50 {% if error %}!border-error-100 bg-error-0{% endif %} {% if inputClass %}{{ inputClass }}{% endif %}"
        placeholder="{{ placeholder|default('') }}"
        {% if required %}required{% endif %}
        {% if maxLength %}maxlength="{{ maxLength }}"{% endif %}
        {% if readonly %}readonly{% endif %}
        >{% if value %}{{ value }}{% endif %}</textarea>
    {% else %}
      <input
        id="{{ fieldId }}"
        type="{% if type == 'password' and showPassword %}text{% else %}{{ type }}{% endif %}"
        name="{{ name|default('') }}"
        class="w-full h-13 px-3 border border-gray-100 rounded-xl text-body-lg text-gray-900 transition-colors outline-0 focus:!border-primary-500 focus:bg-primary-50 max-md:h-12 {% if error %}!border-error-100 bg-error-0{% endif %} {% if inputClass %}{{ inputClass }}{% endif %}"
        placeholder="{{ placeholder|default('') }}"
        value="{{ value|default('') }}"
        {% if required %}required{% endif %}
        {% if maxLength %}maxlength="{{ maxLength }}"{% endif %}
        {% if pattern %}pattern="{{ pattern }}"{% endif %}
        {% if readonly %}readonly{% endif %}
      />

      {% if type == 'password' %}
        <button
          type="button"
          class="absolute right-3 top-1/2 -translate-y-1/2 outline-0 text-gray-400 hover:text-gray-900 transition-colors"
          onclick="togglePassword(this)">
          <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 5C7 5 2.73 8.11 1 12.46c1.73 4.35 6 7.54 11 7.54s9.27-3.19 11-7.54C21.27 8.11 17 5 12 5zm0 10c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm0-7c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
          </svg>
        </button>
      {% endif %}
    {% endif %}
  </div>

  {% if note %}
    <div class="mt-2 text-body-sm {% if error %}text-error-100{% else %}text-gray-400{% endif %}">
      {{ note }}
    </div>
  {% endif %}
</div>

<script>
  function togglePassword(button) {
    const input = button.previousElementSibling;
    if (input.type === 'password') {
      input.type = 'text';
      button.classList.add('text-gray-900');
    } else {
      input.type = 'password';
      button.classList.remove('text-gray-900');
    }
  }
</script>
